{"ast":null,"code":"import { DELETE_JOB, ERROR_WHILE_DELETING_JOB, ERROR_LOADING_JOB, LOADED_JOB, ADD_NEW_JOB, ERROR_ADDING_JOB, GOT_JOBS, ERROR_GETTING_JOB, EDITED_JOB, FAILED_EDITING_JOB, GET_ALL_JOBS } from './types';\nimport axios from 'axios';\nimport { setalert } from './alert';\nimport { loaduserusingtoken } from './auth';\nexport const addNewJob = formData => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    let response;\n    const data = JSON.stringify(formData);\n    response = await axios.post('/jobs', data, config);\n    dispatch({\n      type: ADD_NEW_JOB,\n      payload: response.data\n    });\n    dispatch(setalert('Added Job Sucesfully', 'danger'));\n  } catch (err) {\n    let errors;\n\n    if (err.response && err.response.data) {\n      errors = err.response.data.errors;\n    }\n\n    if (errors) {\n      errors.forEach(error => {\n        dispatch(setalert(error.msg, 'danger'));\n      });\n    }\n\n    dispatch({\n      type: ERROR_ADDING_JOB,\n      payload: {\n        msg: err.response && err.response.statusText ? err.response.statusText : '',\n        status: err.response && err.response.status ? err.response.status : ''\n      }\n    });\n  }\n};\nexport const getJobs = () => async dispatch => {\n  try {\n    const response = await axios.get('/jobs');\n    dispatch({\n      type: GOT_JOBS,\n      payload: response.data\n    });\n  } catch (err) {\n    let errors;\n\n    if (err.response && err.response.data) {\n      errors = err.response.data.errors;\n    }\n\n    if (errors) {\n      errors.forEach(error => {\n        dispatch(setalert(error.msg, 'danger'));\n      });\n    }\n\n    dispatch({\n      type: ERROR_GETTING_JOB,\n      payload: {\n        msg: err.response && err.response.statusText ? err.response.statusText : '',\n        status: err.response && err.response.status ? err.response.status : ''\n      }\n    });\n  }\n};\nexport const deleteJob = id => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    let response;\n    let data = JSON.stringify({\n      id\n    });\n    response = await axios.post('/jobs/delete', data, config);\n    dispatch({\n      type: DELETE_JOB,\n      payload: response.data\n    });\n    dispatch(setalert('Deleted Job', 'danger'));\n  } catch (err) {\n    let errors;\n\n    if (err.response && err.response.data) {\n      errors = err.response.data.errors;\n    }\n\n    if (errors) {\n      errors.forEach(error => {\n        dispatch(setalert(error.msg, 'danger'));\n      });\n    }\n\n    dispatch({\n      type: ERROR_GETTING_JOB,\n      payload: {\n        msg: err.response && err.response.statusText ? err.response.statusText : '',\n        status: err.response && err.response.status ? err.response.status : ''\n      }\n    });\n  }\n};\nexport const loadJobWithId = id => async dispatch => {\n  try {\n    // console.log('jelo');\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const data = JSON.stringify({\n      id\n    });\n    let response = await axios.post('/jobs/id', data, config); // console.log(response.data);\n\n    dispatch({\n      type: LOADED_JOB,\n      payload: response.data\n    }); // console.log(response.data);\n  } catch (err) {\n    let errors;\n\n    if (err.response && err.response.data) {\n      errors = err.response.data.errors;\n    }\n\n    if (errors) {\n      errors.forEach(error => {\n        dispatch(setalert(error.msg, 'danger'));\n      });\n    }\n\n    dispatch({\n      type: ERROR_LOADING_JOB,\n      payload: {\n        msg: err.response && err.response.statusText ? err.response.statusText : '',\n        status: err.response && err.response.status ? err.response.status : ''\n      }\n    });\n  }\n};\nexport const editJob = formdata => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const data = JSON.stringify(formdata);\n    const response = await axios.post('/jobs/update', data, config);\n    dispatch({\n      type: EDITED_JOB,\n      payload: response.data\n    });\n    dispatch(setalert('Edited Profile Sucessfully', 'danger'));\n  } catch (err) {\n    let errors;\n\n    if (err.response && err.response.data) {\n      errors = err.response.data.errors;\n    }\n\n    if (errors) {\n      errors.forEach(error => {\n        dispatch(setalert(error.msg, 'danger'));\n      });\n    }\n\n    dispatch({\n      type: FAILED_EDITING_JOB,\n      payload: {\n        msg: err.response && err.response.statusText ? err.response.statusText : '',\n        status: err.response && err.response.status ? err.response.status : ''\n      }\n    });\n  }\n};","map":{"version":3,"sources":["D:/0Всі версії/Job-Portal-Redux/frontend/src/actions/jobs.js"],"names":["DELETE_JOB","ERROR_WHILE_DELETING_JOB","ERROR_LOADING_JOB","LOADED_JOB","ADD_NEW_JOB","ERROR_ADDING_JOB","GOT_JOBS","ERROR_GETTING_JOB","EDITED_JOB","FAILED_EDITING_JOB","GET_ALL_JOBS","axios","setalert","loaduserusingtoken","addNewJob","formData","dispatch","config","headers","response","data","JSON","stringify","post","type","payload","err","errors","forEach","error","msg","statusText","status","getJobs","get","deleteJob","id","loadJobWithId","editJob","formdata"],"mappings":"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","sourcesContent":["import { DELETE_JOB, ERROR_WHILE_DELETING_JOB, ERROR_LOADING_JOB, LOADED_JOB, ADD_NEW_JOB, ERROR_ADDING_JOB, GOT_JOBS, ERROR_GETTING_JOB, EDITED_JOB, FAILED_EDITING_JOB, GET_ALL_JOBS} from './types';\nimport axios from 'axios';\nimport { setalert } from './alert';\nimport {loaduserusingtoken} from './auth';\n\n\nexport const addNewJob = (formData) => async dispatch => {\n    try {\n        const config = {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n        };\n        let response;\n        const data = JSON.stringify(formData);\n        response = await axios.post('/jobs', data, config);\n        dispatch({\n            type: ADD_NEW_JOB,\n            payload: response.data\n        });\n        dispatch(setalert('Added Job Sucesfully', 'danger'));\n    } catch (err) {\n        let errors;\n        if(err.response && err.response.data){\n            errors = err.response.data.errors;\n        }\n        if(errors){\n            errors.forEach((error) => {dispatch(setalert(error.msg, 'danger'))});\n        }\n        dispatch({\n            type: ERROR_ADDING_JOB,\n            payload: {msg: err.response && err.response.statusText ? err.response.statusText : '', status: err.response && err.response.status ? err.response.status : ''}\n        });\n    }\n};\n\n\nexport const getJobs = () => async dispatch => {\n    try {\n        const response = await axios.get('/jobs');\n        dispatch({\n            type: GOT_JOBS,\n            payload: response.data\n        });\n    } catch (err) {\n        let errors;\n        if(err.response && err.response.data){\n            errors = err.response.data.errors;\n        }\n        if(errors){\n            errors.forEach((error) => {dispatch(setalert(error.msg, 'danger'))});\n        }\n        dispatch({\n            type: ERROR_GETTING_JOB,\n            payload: {msg: err.response && err.response.statusText ? err.response.statusText : '', status: err.response && err.response.status ? err.response.status : ''}\n        });\n    }\n}\n\nexport const deleteJob = (id) => async dispatch => {\n    try {\n        const config = {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n        };\n        let response;\n        let data = JSON.stringify({id});\n        response = await axios.post('/jobs/delete', data, config);\n        \n        dispatch({\n            type: DELETE_JOB,\n            payload: response.data\n        });\n        dispatch(setalert('Deleted Job', 'danger'));\n    } catch (err) {\n        let errors;\n        if(err.response && err.response.data){\n            errors = err.response.data.errors;\n        }\n        if(errors){\n            errors.forEach((error) => {dispatch(setalert(error.msg, 'danger'))});\n        }\n        dispatch({\n            type: ERROR_GETTING_JOB,\n            payload: {msg: err.response && err.response.statusText ? err.response.statusText : '', status: err.response && err.response.status ? err.response.status : ''}\n        }); \n    }\n}\n\nexport const loadJobWithId = (id) => async dispatch => {\n    try {\n        // console.log('jelo');\n        const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n    }\n        const data = JSON.stringify({id});\n        let response = await axios.post('/jobs/id',data, config);\n        // console.log(response.data);\n        dispatch({\n            type: LOADED_JOB,\n            payload: response.data\n        });\n        // console.log(response.data);\n    } catch (err) {\n        let errors;\n        if(err.response && err.response.data){\n            errors = err.response.data.errors;\n        }\n        if(errors){\n            errors.forEach((error) => {dispatch(setalert(error.msg, 'danger'))});\n        }\n        dispatch({\n            type: ERROR_LOADING_JOB,\n            payload: {msg: err.response && err.response.statusText ? err.response.statusText : '', status: err.response && err.response.status ? err.response.status : ''}\n        });\n\n    }\n} \n\nexport const editJob = (formdata) => async dispatch => {\n    try {\n        const config = {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n        }\n            const data = JSON.stringify(formdata);\n            const response = await axios.post('/jobs/update', data, config);\n            dispatch({\n                type: EDITED_JOB,\n                payload: response.data\n            })\n            dispatch(setalert('Edited Profile Sucessfully', 'danger'));\n        \n    } catch (err) {\n        let errors;\n        if(err.response && err.response.data){\n            errors = err.response.data.errors;\n        }\n        if(errors){\n            errors.forEach((error) => {dispatch(setalert(error.msg, 'danger'))});\n        }\n        dispatch({\n            type: FAILED_EDITING_JOB,\n            payload: {msg: err.response && err.response.statusText ? err.response.statusText : '', status: err.response && err.response.status ? err.response.status : ''}\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}