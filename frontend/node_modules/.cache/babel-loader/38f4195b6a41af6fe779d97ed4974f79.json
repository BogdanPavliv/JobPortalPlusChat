{"ast":null,"code":"import { ADDED_NEW_APPLICATION, FAILED_TO_ADD_NEW_APPLICATION, GOT_ALL_APPLICATION, FAILED_TO_GET_ALL_APPLICATION, GOT_ALL_APPLICATION_STATUS, FAILED_TO_GET_ALL_APPLICATION_STATUS } from './types';\nimport axios from 'axios';\nimport { setalert } from './alert';\nimport { loaduserusingtoken } from './auth';\nexport const newApplication = formData => async dispatch => {\n  try {\n    // console.log('Trinadh Is Great');\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }; // console.log('Trinadh Is Great');\n\n    const data = JSON.stringify(formData);\n    const response = await axios.post('/appjobs', data, config);\n    dispatch({\n      type: ADDED_NEW_APPLICATION,\n      payload: response.data\n    });\n    dispatch(setalert('New Application Created', 'danger'));\n  } catch (err) {\n    let errors;\n\n    if (err.response && err.response.data) {\n      errors = err.response.data.errors;\n    }\n\n    if (errors) {\n      errors.forEach(error => {\n        dispatch(setalert(error.msg, 'danger'));\n      });\n    }\n\n    dispatch({\n      type: FAILED_TO_ADD_NEW_APPLICATION,\n      payload: {\n        msg: err.response && err.response.statusText ? err.response.statusText : '',\n        status: err.response && err.response.status ? err.response.status : ''\n      }\n    });\n  }\n};\nexport const getApplications = () => async dispatch => {\n  try {\n    const response = await axios.get('/appjobs');\n    dispatch({\n      type: GOT_ALL_APPLICATION,\n      payload: response.data\n    });\n  } catch (err) {\n    let errors;\n\n    if (err.response && err.response.data) {\n      errors = err.response.data.errors;\n    }\n\n    if (errors) {\n      errors.forEach(error => {\n        dispatch(setalert(error.msg, 'danger'));\n      });\n    }\n\n    dispatch({\n      type: FAILED_TO_GET_ALL_APPLICATION,\n      payload: {\n        msg: err.response && err.response.statusText ? err.response.statusText : '',\n        status: err.response && err.response.status ? err.response.status : ''\n      }\n    });\n  }\n};\nexport const getApplicationsById = id => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const data = JSON.stringify({\n      id\n    });\n    const response = await axios.post('/appjobs/id', data, config);\n    dispatch({\n      type: GOT_ALL_APPLICATION,\n      payload: response.data\n    });\n  } catch (err) {\n    let errors;\n\n    if (err.response && err.response.data) {\n      errors = err.response.data.errors;\n    }\n\n    if (errors) {\n      errors.forEach(error => {\n        dispatch(setalert(error.msg, 'danger'));\n      });\n    }\n\n    dispatch({\n      type: FAILED_TO_GET_ALL_APPLICATION,\n      payload: {\n        msg: err.response && err.response.statusText ? err.response.statusText : '',\n        status: err.response && err.response.status ? err.response.status : ''\n      }\n    });\n  }\n};\nexport const changeStatus = formData => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const data = JSON.stringify(formData);\n    const response = await axios.post('/appjobs/statusupdate', data, config);\n    dispatch({\n      type: GOT_ALL_APPLICATION_STATUS,\n      payload: response.data\n    });\n    dispatch(setalert('Status is changed', 'danger'));\n  } catch (err) {\n    let errors;\n\n    if (err.response && err.response.data) {\n      errors = err.response.data.errors;\n    }\n\n    if (errors) {\n      errors.forEach(error => {\n        dispatch(setalert(error.msg, 'danger'));\n      });\n    }\n\n    dispatch({\n      type: FAILED_TO_GET_ALL_APPLICATION_STATUS,\n      payload: {\n        msg: err.response && err.response.statusText ? err.response.statusText : '',\n        status: err.response && err.response.status ? err.response.status : ''\n      }\n    });\n  }\n};","map":{"version":3,"sources":["D:/0Всі версії/Job-Portal-Redux/frontend/src/actions/applications.js"],"names":["ADDED_NEW_APPLICATION","FAILED_TO_ADD_NEW_APPLICATION","GOT_ALL_APPLICATION","FAILED_TO_GET_ALL_APPLICATION","GOT_ALL_APPLICATION_STATUS","FAILED_TO_GET_ALL_APPLICATION_STATUS","axios","setalert","loaduserusingtoken","newApplication","formData","dispatch","config","headers","data","JSON","stringify","response","post","type","payload","err","errors","forEach","error","msg","statusText","status","getApplications","get","getApplicationsById","id","changeStatus"],"mappings":"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","sourcesContent":["import {ADDED_NEW_APPLICATION, FAILED_TO_ADD_NEW_APPLICATION, GOT_ALL_APPLICATION, FAILED_TO_GET_ALL_APPLICATION, GOT_ALL_APPLICATION_STATUS, FAILED_TO_GET_ALL_APPLICATION_STATUS } from './types';\nimport axios from 'axios';\nimport { setalert } from './alert';\nimport {loaduserusingtoken} from './auth';\n\n\nexport const newApplication = (formData) => async dispatch => {\n    try {\n        // console.log('Trinadh Is Great');\n        const config = {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n        }\n        // console.log('Trinadh Is Great');\n            const data = JSON.stringify(formData);\n            const response = await axios.post('/appjobs', data, config);\n            dispatch({\n                type: ADDED_NEW_APPLICATION,\n                payload: response.data\n            });\n            dispatch(setalert('New Application Created', 'danger'));\n    } catch (err) {\n        let errors;\n        if(err.response && err.response.data){\n            errors = err.response.data.errors;\n        }\n        if(errors){\n            errors.forEach((error) => {dispatch(setalert(error.msg, 'danger'))});\n        }\n        dispatch({\n            type: FAILED_TO_ADD_NEW_APPLICATION,\n            payload: {msg: err.response && err.response.statusText ? err.response.statusText : '', status: err.response && err.response.status ? err.response.status : ''}\n        });\n    }\n} \n\n\nexport const getApplications = () => async dispatch => {\n    try {\n            const response = await axios.get('/appjobs');\n            dispatch({\n                type: GOT_ALL_APPLICATION,\n                payload: response.data\n            });\n    } catch (err) {\n        let errors;\n        if(err.response && err.response.data){\n            errors = err.response.data.errors;\n        }\n        if(errors){\n            errors.forEach((error) => {dispatch(setalert(error.msg, 'danger'))});\n        }\n        dispatch({\n            type: FAILED_TO_GET_ALL_APPLICATION,\n            payload: {msg: err.response && err.response.statusText ? err.response.statusText : '', status: err.response && err.response.status ? err.response.status : ''}\n        });\n    }\n} \n\n\nexport const getApplicationsById = (id) => async dispatch => {\n    try {\n        const config = {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n        }\n                    const data = JSON.stringify({id});\n            const response = await axios.post('/appjobs/id', data, config);        \n            dispatch({\n                type: GOT_ALL_APPLICATION,\n                payload: response.data\n            });\n    } catch (err) {\n        let errors;\n        if(err.response && err.response.data){\n            errors = err.response.data.errors;\n        }\n        if(errors){\n            errors.forEach((error) => {dispatch(setalert(error.msg, 'danger'))});\n        }\n        dispatch({\n            type: FAILED_TO_GET_ALL_APPLICATION,\n            payload: {msg: err.response && err.response.statusText ? err.response.statusText : '', status: err.response && err.response.status ? err.response.status : ''}\n        });\n    }\n} \n\n\n\nexport const changeStatus = (formData) => async dispatch => {\n    try {\n        const config = {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n        }\n                    const data = JSON.stringify(formData);\n            const response = await axios.post('/appjobs/statusupdate', data, config);        \n            dispatch({\n                type: GOT_ALL_APPLICATION_STATUS,\n                payload: response.data\n            });\n        dispatch(setalert('Status is changed', 'danger'));\n    } catch (err) {\n        let errors;\n        if(err.response && err.response.data){\n            errors = err.response.data.errors;\n        }\n        if(errors){\n            errors.forEach((error) => {dispatch(setalert(error.msg, 'danger'))});\n        }\n        dispatch({\n            type: FAILED_TO_GET_ALL_APPLICATION_STATUS,\n            payload: {msg: err.response && err.response.statusText ? err.response.statusText : '', status: err.response && err.response.status ? err.response.status : ''}\n        });\n    }\n} "]},"metadata":{},"sourceType":"module"}