{"ast":null,"code":"import { CLEAR_PROFILE, REG_SUCC, REG_FAIL, Applicant, USER_LOADED, AUTH_FAILED, LOGIN_FAIL, LOGIN_SUCC, LOGOUT } from './types';\nimport axios from 'axios';\nimport { setalert } from './alert';\nimport { setDefaultXAuthForToken } from '../utils/setdefaultxauth';\nimport { getUserProfile } from './profile';\nexport const loaduserusingtoken = () => async dispatch => {\n  setDefaultXAuthForToken(localStorage.getItem('token'));\n\n  try {\n    const response = await axios.get('/profile/me');\n    dispatch({\n      type: USER_LOADED,\n      payload: response.data\n    }); // dispatch(getUserProfile);\n  } catch (err) {\n    dispatch({\n      type: AUTH_FAILED\n    });\n  }\n};\nexport const loginuser = ({\n  password,\n  email\n}) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }; //   console.log(password);\n    //   console.log(email);\n\n    const newUser = {\n      password,\n      email\n    };\n    const userData = JSON.stringify(newUser);\n    const response = await axios.post('/auth/login', userData, config);\n    dispatch({\n      type: LOGIN_SUCC,\n      payload: response.data\n    });\n    dispatch(loaduserusingtoken());\n  } catch (err) {\n    let errors;\n\n    if (err.response && err.response.data) {\n      errors = err.response.data.errors;\n    }\n\n    if (errors) {\n      errors.forEach(error => {\n        dispatch(setalert(error.msg, 'danger'));\n      });\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch(loaduserusingtoken());\n  }\n};\nexport const registeruser = ({\n  name,\n  email,\n  password,\n  who\n}) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const newUser = {\n      name,\n      email,\n      password,\n      who\n    };\n    const userData = JSON.stringify(newUser);\n    let response;\n\n    if (who === Applicant) {\n      response = await axios.post('/applicant', userData, config);\n    } else {\n      response = await axios.post('/recruiter', userData, config);\n    }\n\n    dispatch({\n      type: REG_SUCC,\n      payload: response.data\n    });\n    dispatch(loaduserusingtoken());\n  } catch (err) {\n    let errors;\n\n    if (err.response && err.response.data) {\n      errors = err.response.data.errors;\n    }\n\n    if (errors) {\n      errors.forEach(error => {\n        dispatch(setalert(error.msg, 'danger'));\n      });\n    }\n\n    dispatch({\n      type: REG_FAIL\n    });\n    dispatch(loaduserusingtoken());\n  }\n};\nexport const logoutuser = () => dispatch => {\n  // console.log('I am here');\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["D:/1Examples Job Portal MERN/Job-Portal-main/frontend/src/actions/auth.js"],"names":["CLEAR_PROFILE","REG_SUCC","REG_FAIL","Applicant","USER_LOADED","AUTH_FAILED","LOGIN_FAIL","LOGIN_SUCC","LOGOUT","axios","setalert","setDefaultXAuthForToken","getUserProfile","loaduserusingtoken","dispatch","localStorage","getItem","response","get","type","payload","data","err","loginuser","password","email","config","headers","newUser","userData","JSON","stringify","post","errors","forEach","error","msg","registeruser","name","who","logoutuser"],"mappings":"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","sourcesContent":["import { CLEAR_PROFILE,  REG_SUCC, REG_FAIL, Applicant , USER_LOADED, AUTH_FAILED, LOGIN_FAIL, LOGIN_SUCC, LOGOUT} from './types';\nimport axios from 'axios';\nimport { setalert } from './alert';\nimport {setDefaultXAuthForToken} from '../utils/setdefaultxauth';\nimport {getUserProfile} from './profile';\n\nexport const loaduserusingtoken = () => async dispatch => {\n    setDefaultXAuthForToken(localStorage.getItem('token'));\n    try {\n        const response = await axios.get('/profile/me');\n        dispatch({\n            type: USER_LOADED,\n            payload: response.data\n        });\n        // dispatch(getUserProfile);\n    } catch (err) {\n        dispatch({\n            type: AUTH_FAILED\n        });\n    }\n};\n\nexport const loginuser = ({password, email}) => async dispatch => {\n    try {\n        const config = {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n          };\n        //   console.log(password);\n        //   console.log(email);\n        const newUser = {\n            password,\n            email\n        };\n        const userData = JSON.stringify(newUser);\n        const response = await axios.post('/auth/login', userData, config);\n        dispatch({\n            type: LOGIN_SUCC,\n            payload: response.data\n        });\n        dispatch(loaduserusingtoken());\n    } catch (err) {\n        let errors;\n        if (err.response && err.response.data)\n        {\n            errors = err.response.data.errors;\n        }\n        if(errors){\n            errors.forEach((error) => {dispatch(setalert(error.msg, 'danger'))});\n        }\n        dispatch({\n            type: LOGIN_FAIL\n        });\n        dispatch(loaduserusingtoken());\n    }\n};\n\n\n\nexport const registeruser = ({name, email, password, who}) => async dispatch => {\n    try {\n        const config = {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n          };\n        const newUser = {\n            name,\n            email,\n            password,\n            who\n        };\n        const userData = JSON.stringify(newUser);\n        let response;          \n        if(who === Applicant){\n            response = await axios.post('/applicant', userData, config);\n        }\n        else{\n            response = await axios.post('/recruiter', userData, config);\n        }\n        dispatch({\n            type: REG_SUCC,\n            payload: response.data\n        });\n        dispatch(loaduserusingtoken());\n    } catch (err) {\n        let errors;\n        if(err.response && err.response.data){\n            errors = err.response.data.errors;\n        }\n        if(errors){\n            errors.forEach((error) => {dispatch(setalert(error.msg, 'danger'))});\n        }\n        dispatch({\n            type: REG_FAIL\n        });\n        dispatch(loaduserusingtoken());\n    }\n};\n\n\nexport const logoutuser = () => dispatch => {\n    // console.log('I am here');\n    dispatch({\n        type: CLEAR_PROFILE\n    })\n    dispatch({\n        type: LOGOUT\n    });\n};"]},"metadata":{},"sourceType":"module"}